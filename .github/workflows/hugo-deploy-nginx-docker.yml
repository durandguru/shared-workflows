name: Hugo Deploy to an Nginx Docker

on:
  workflow_call:
    secrets:
      WG_CLIENT_PRIVATEKEY: 
        required: true
      SSH_KEY: 
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  hugo-deploy-nginx-docker:
    name: "Hugo Deploy to an Nginx Docker"
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: true

      # Setup Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2.6.0
        with:
          hugo-version: '0.115.0'
          extended: true

      # Build Hugo Website
      - name: Build website with Hugo
        run: hugo --minify

      # Wireguard - Install
      - name: Wireguard - Install
        run: sudo apt install wireguard wireguard-tools

      # Wireguard - Setup
      - name: Wireguard - Setup
        run: | 
          echo "${{ secrets.WG_CLIENT_PRIVATEKEY }}" > privatekey
          sudo ip link add dev wg0 type wireguard
          sudo ip address add dev wg0 ${{ vars.WG_CLIENT_IP }}
          sudo wg set wg0 listen-port 48123 private-key privatekey peer ${{ vars.SHARED_WG_SERVER_PUBLICKEY }} allowed-ips ${{ vars.SHARED_WG_SERVER_IPSPACE }} endpoint ${{ vars.SHARED_WG_SERVER_ENDPOINT }}
          sudo ip link set up dev wg0
          sudo ip route add ${{ vars.SHARED_WG_SERVER_IPSPACE }} dev wg0
    
      # Deploy build website with rsync to host
      - name: Deploy website with rsync
        uses: Burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --quiet --delete
          path: public/
          remote_path: ${{ vars.SSH_PATH }}
          remote_host: ${{ vars.SSH_HOST }}
          remote_user: ${{ vars.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}

      # NTFY Message (https://ntfy.durand.guru/docs/examples/?h=git#github-actions) (https://docs.github.com/en/actions/learn-github-actions/contexts)
      - name: NTFY
        if: always()
        run: |
          curl \
          -H "Title: ${{ github.workflow }} has status ${{ job.status}}" \
          -H "Content-Type: text/plain" \
          -d $'Repo: ${{ github.repository }}\nCommit: ${{ github.event.head_commit.message }}\nBy: ${{ github.actor }}\nStatus: ${{ job.status}}' \
          ${{ vars.NTFY_URL }}