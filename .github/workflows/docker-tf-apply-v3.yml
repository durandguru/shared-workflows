name: docker-tf-apply-v3

on:
  workflow_call:
    inputs:
      server:
        required: true
        type: string
    secrets:
      SHARED_WG_CLIENT_PRIVATEKEY: 
        required: true
      SSH_KEY: 
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ vars.SHARED_AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ vars.SHARED_AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ vars.SHARED_AZURE_TENANT_ID }}"
  SHARED_WG_CLIENT_PRIVATEKEY: ${{ secrets.SHARED_WG_CLIENT_PRIVATEKEY }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
          
jobs:
  tfapply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # Wireguard - Install
      - name: Wireguard - Install
        run: sudo apt install wireguard wireguard-tools

      # Wireguard - Setup
      - name: Wireguard - Setup
        run: | 
          echo "${{ secrets.SHARED_WG_CLIENT_PRIVATEKEY }}" > privatekey
          sudo ip link add dev wg0 type wireguard
          sudo ip address add dev wg0 ${{ vars.SHARED_WG_CLIENT_IP }}
          sudo wg set wg0 listen-port 48123 private-key privatekey peer ${{ vars.SHARED_WG_SERVER_PUBLICKEY }} allowed-ips '${{ vars.SHARED_WG_SERVER_IPSPACE }}, ${{ vars.SHARED_WG_SERVER_IPSPACE2 }}' endpoint ${{ vars.SHARED_WG_SERVER_ENDPOINT }}
          sudo ip link set up dev wg0
          sudo ip route add ${{ vars.SHARED_WG_SERVER_IPSPACE }} dev wg0
          sudo ip route add ${{ vars.SHARED_WG_SERVER_IPSPACE2 }} dev wg0

      # Write Private SSH Key
      - name: Write Key Files
        run: |
          mkdir -p ~/.ssh/ && touch ~/.ssh/known_hosts
          ssh-keyscan ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Rsync Config Files to Host
      - name: rsync config files to host
        run: |
          rsync -avzr --delete ${{ github.workspace }}/${{ inputs.server }}/docker-config-files/ ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:${{ vars.DOCKER_CONFIG_PATH }}

      # Terraform Setup
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0

      # Login to Azure CLI
      - name: 'Az CLI login'
        uses: Azure/login@v2
        with:
            client-id: ${{ vars.SHARED_AZURE_CLIENT_ID }}
            tenant-id: ${{ vars.SHARED_AZURE_TENANT_ID }}
            subscription-id: ${{ vars.SHARED_AZURE_SUBSCRIPTION_ID }}

      # Terraform Init
      - name: Terraform Init
        run: terraform -chdir=./${{ inputs.server }} init

      # Terraform Apply
      - name: Terraform Apply
        run: terraform -chdir=./${{ inputs.server }} apply -var-file='../variables.tfvars' -auto-approve

      # NTFY Message (https://ntfy.durand.guru/docs/examples/?h=git#github-actions) (https://docs.github.com/en/actions/learn-github-actions/contexts)
      - name: NTFY
        if: always()
        run: |
          curl \
          -H "Title: ${{ github.workflow }} has status ${{ job.status}}" \
          -H "Content-Type: text/plain" \
          -d $'Repo: ${{ github.repository }}\nCommit: ${{ github.event.head_commit.message }}\nBy: ${{ github.actor }}\nStatus: ${{ job.status}}' \
          ${{ vars.NTFY_URL }}